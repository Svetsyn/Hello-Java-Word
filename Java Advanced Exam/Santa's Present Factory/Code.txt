package com.company;

import org.w3c.dom.ls.LSOutput;

import java.util.*;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int[] boxMaterials = Arrays.stream(scanner.nextLine().split("\\s+")).mapToInt(Integer::parseInt).filter(n -> n != 0).filter(n -> n <= 100).toArray();
        ArrayDeque<Integer> box = ParseIntegerStack(boxMaterials);

        int[] boxMagic = Arrays.stream(scanner.nextLine().split("\\s+")).mapToInt(Integer::parseInt).filter(n -> n > -101).filter(n -> n <= 100).toArray();
        ArrayDeque<Integer> magic = ParseIntegerQueue(boxMagic);

        Map<String, Integer> bigBox = new TreeMap<>();

        while (!(box.isEmpty() || magic.isEmpty())) {
            int currentBoxValue = box.peek();
            int currentMagicValue = magic.peek();

            if (currentBoxValue == 0) {
                box.pop();
                continue;
            }
            if (currentMagicValue == 0) {
                magic.remove();
                continue;
            }


            int resultByMultiplication = currentBoxValue * currentMagicValue;
            String checkInTable = CheckInTable(resultByMultiplication);

            if (checkInTable == "") {
                if (resultByMultiplication < 0) {
                    int resultBySum = currentBoxValue + currentMagicValue;
                    box.pop();
                    magic.remove();
                    box.push(resultBySum);
                } else if (resultByMultiplication > 0) {
                    int currentBox = box.pop();
                    magic.remove();
                    //box.pop();
                    box.push(currentBox + 15);
                }
            } else {

                bigBox.putIfAbsent(checkInTable, 0);
                bigBox.put(checkInTable, bigBox.get(checkInTable) + 1);
                box.pop();
                magic.remove();
            }

        }

        if ((bigBox.containsKey("Doll") && bigBox.containsKey("Wooden train")) || ((bigBox.containsKey("Teddy bear")) && bigBox.containsKey("Bicycle"))) {
            System.out.println("The presents are crafted! Merry Christmas!");
        } else {
            System.out.println("No presents this Christmas!");
        }
        List<Integer> finalStack = new ArrayList<>();
        List<Integer> finalQueue = new ArrayList<>();

        if (!box.isEmpty()) {
            System.out.print("Materials left: ");
            while (!box.isEmpty()) {
                finalStack.add(box.pop());
            }
            for (int i = 0; i < finalStack.size(); i++) {
                if (i == finalStack.size() - 1) {
                    System.out.println(finalStack.get(i));
                } else {
                    System.out.print(finalStack.get(i) + ", ");
                }
            }
        }
        if (!magic.isEmpty()) {
            System.out.print("Magic left: ");
            while (!magic.isEmpty()) {
                finalQueue.add(magic.remove());
            }
            for (int i = 0; i < finalQueue.size(); i++) {
                if (i == finalQueue.size() - 1) {
                    System.out.println(finalQueue.get(i));
                } else {
                    System.out.print(finalQueue.get(i) + ", ");
                }
            }
        }

        for (Map.Entry<String, Integer> entry : bigBox.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }

    private static ArrayDeque<Integer> ParseIntegerQueue(int[] boxMagic) {
        ArrayDeque<Integer> magic = new ArrayDeque<>();
        for (int i : boxMagic) {
            magic.offer(i);
        }
        return magic;
    }

    private static ArrayDeque<Integer> ParseIntegerStack(int[] boxMaterials) {
        ArrayDeque<Integer> box = new ArrayDeque<>();
        for (int boxMaterial : boxMaterials) {
            box.push(boxMaterial);
        }
        return box;
    }

    private static String CheckInTable(int resultByMultiplication) {
        String toy = "";
        switch (resultByMultiplication) {
            case 150:
                toy = "Doll";
                break;
            case 250:
                toy = "Wooden train";
                break;
            case 300:
                toy = "Teddy bear";
                break;
            case 400:
                toy = "Bicycle";
                break;
        }
        return toy;
    }


}