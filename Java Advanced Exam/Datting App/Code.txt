import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int[] m = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        ArrayDeque<Integer> male = parseToQueue(m);

        int[] f = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        ArrayDeque<Integer> female = parseToStack(f);

        int dataCounter = 0;
        while (!(male.isEmpty() || female.isEmpty())) {
            int currentFemale = female.peek();
            int currentMale = male.peek();

            if (checkValidValue(male, female, currentFemale, currentMale)) continue;

            if (currentFemale == currentMale) {
                female.pop();
                male.remove();
                dataCounter++;
            } else {
                int[] curr = new int[male.size()];
                for (int i = 0; i < curr.length; i++) {
                    if (i == 0) {
                        int currentMaleDecrease = male.peek();
                        curr[i] = (currentMaleDecrease - 2);
                        male.remove();
                    } else {
                        curr[i] = male.remove();
                    }
                }
                female.pop();
                for (int i = 0; i < curr.length; i++) {
                    male.offer(curr[i]);
                }
            }
        }

        System.out.println("Matches: " + dataCounter);
        
        System.out.print("Males left: ");
        if (male.isEmpty()) {
            System.out.println("none");
        } else {
            List<Integer> finalMales = new ArrayList<>();
            while (!male.isEmpty()) {
                finalMales.add(male.remove());
            }
            for (int i = 0; i < finalMales.size(); i++) {
                if (i == finalMales.size() - 1) {
                    System.out.println(finalMales.get(i));
                } else {
                    System.out.print(finalMales.get(i) + ", ");
                }
            }
        }

        System.out.print("Females left: ");
        if (female.isEmpty()) {
            System.out.println("none");
        } else {
            List<Integer> finalFemales = new ArrayList<>();
            while (!female.isEmpty()) {
                finalFemales.add(female.pop());
            }
            for (int i = 0; i < finalFemales.size(); i++) {
                if (i == finalFemales.size() - 1) {
                    System.out.println(finalFemales.get(i));
                } else {
                    System.out.print(finalFemales.get(i) + ", ");
                }
            }
        }


    }

    private static boolean checkValidValue(ArrayDeque<Integer> male, ArrayDeque<Integer> female, int currentFemale, int currentMale) {
        if (currentFemale <= 0) {
            female.pop();
            return true;
        }
        if (currentMale <= 0) {
            male.remove();
            return true;
        }
        if (currentFemale % 25 == 0) {
            female.pop();
            female.pop();
            return true;
        }
        if (currentMale % 25 == 0) {
            male.remove();
            male.remove();
            return true;
        }
        return false;
    }

    private static ArrayDeque<Integer> parseToQueue(int[] m) {
        ArrayDeque<Integer> male = new ArrayDeque<>();
        for (int i = m.length - 1; i >= 0; i--) {
            male.offer(m[i]);
        }
        return male;
    }

    private static ArrayDeque<Integer> parseToStack(int[] f) {
        ArrayDeque<Integer> female = new ArrayDeque<>();
        for (int i = f.length - 1; i >= 0; i--) {
            female.push(f[i]);
        }
        return female;
    }
}
