package com.company;

import java.util.*;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        List<Integer> result1 = readList(scanner);
        ArrayDeque<Integer> liquids = ParseQueue(result1);
        List<Integer> result2 = readList(scanner);
        ArrayDeque<Integer> items = ParseStack((result2));

        Map<String, Integer> collectElement = new TreeMap<>();
        collectElement.put("Glass", 0);
        collectElement.put("Aluminium", 0);
        collectElement.put("Lithium", 0);
        collectElement.put("Carbon fiber", 0);

        while (!(liquids.isEmpty() || items.isEmpty())) {
            int currentLiq = liquids.poll();
            int currentItem = items.pop();

            int result = currentItem + currentLiq;
            String element = GetMaterialsSum(result);

            if (element == "") {
                items.push(currentItem + 3);
            } else {
                collectElement.put(element, collectElement.get(element) + 1);
            }
        }
        boolean checker = false;

        for (Map.Entry<String, Integer> entry : collectElement.entrySet()) {
            if (entry.getValue() == 0) {
                System.out.println("Ugh, what a pity! You didn't have enough materials to build the spaceship.");
                checker = true;
                break;
            }
        }
        if (checker == false) {
            System.out.println("Wohoo! You succeeded in building the spaceship!");
        }
        System.out.print("Liquids left: ");
        if (liquids.isEmpty()) {
            System.out.println("none");
        } else {
            String result = GetResult(liquids);
            System.out.println(result);
        }

        System.out.print("Physical items left: ");
        if (items.isEmpty()) {
            System.out.println("none");
        } else {
            String result = GetResult(items);
            System.out.println(result);
        }

        for (Map.Entry<String, Integer> mentry : collectElement.entrySet()) {
            System.out.println(mentry.getKey() + ": " + mentry.getValue());
        }
    }

    private static String GetResult(ArrayDeque<Integer> item) {
        StringBuilder sb = new StringBuilder();
        while (!item.isEmpty()) {
            sb.append(item.poll());
            if (item.isEmpty()) {
                break;
            }
            sb.append(", ");
        }
        return sb.toString().trim();
    }

    private static String GetMaterialsSum(int result) {
        String element = "";
        switch (result) {
            case 25:
                element = "Glass";
                break;
            case 50:
                element = "Aluminium";
                break;
            case 75:
                element = "Lithium";
                break;
            case 100:
                element = "Carbon fiber";
                break;
        }
        return element;
    }

    private static ArrayDeque<Integer> ParseStack(List<Integer> result2) {
        ArrayDeque<Integer> item = new ArrayDeque<>();
        for (Integer integer : result2) {
            item.push(integer);
        }
        return item;
    }

    private static List<Integer> readList(Scanner scanner) {
        List<Integer> listInt = Arrays.stream(scanner.nextLine().split("\\s+")).map(Integer::parseInt).collect(Collectors.toList());
        return listInt;
    }

    private static ArrayDeque<Integer> ParseQueue(List<Integer> result1) {
        ArrayDeque<Integer> liquid = new ArrayDeque<>();
        for (Integer listLiquid : result1) {
            liquid.offer(listLiquid);
        }
        return liquid;
    }
}
