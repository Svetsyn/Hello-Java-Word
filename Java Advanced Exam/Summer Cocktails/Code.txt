import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] ing = Arrays.stream(scanner.nextLine().split("\\s+")).mapToInt(Integer::parseInt).toArray();
        ArrayDeque<Integer> ingredient = ParseToStack(ing);
        int[] level = Arrays.stream(scanner.nextLine().split("\\s+")).mapToInt(Integer::parseInt).toArray();
        ArrayDeque<Integer> freshLevel = ParseToQueue(level);

        Map<String, Integer> cocktails = new TreeMap<>();

        while (!(ingredient.isEmpty() || freshLevel.isEmpty())) {
            int currentIngr = ingredient.peek();
            int currentFrLevel = freshLevel.peek();
            if (currentIngr == 0) {
                ingredient.pop();
                continue;
            }
            if (currentFrLevel == 0) {
                freshLevel.remove();
                continue;
            }
            int resultByMultiple = currentIngr * currentFrLevel;

            String result = CheckForEqual(resultByMultiple);
            if (result == null) {
                freshLevel.remove();
                currentIngr += 5;
                ingredient.pop();
                int[] con = new int[ingredient.size() + 1];
                for (int i = 0; i < con.length; i++) {
                    if (i == con.length - 1) {
                        con[i] = currentIngr;
                    } else {
                        con[i] = ingredient.pop();
                    }
                }
                for (int i = con.length - 1; i >= 0; i--) {
                    ingredient.push(con[i]);
                }
            } else {
                cocktails.putIfAbsent(result, 0);
                cocktails.put(result, cocktails.get(result) + 1);
                ingredient.pop();
                freshLevel.remove();
            }
        }
        if (cocktails.containsKey("Mimosa") && cocktails.containsKey("Daiquiri") && cocktails.containsKey("Sunshine") && cocktails.containsKey("Mojito")) {
            System.out.println("It's party time! The cocktails are ready!");
        } else {
            System.out.println("What a pity! You didn't manage to prepare all cocktails.");
        }
        int sumIngr = 0;
        if (!ingredient.isEmpty()) {
            for (Integer integer : ingredient) {
                sumIngr += integer;
            }
            if (sumIngr!=0) {
                System.out.println("Ingredients left: " + sumIngr);
            }
        }
        for (Map.Entry<String, Integer> entry : cocktails.entrySet()) {
            System.out.println(" # " + entry.getKey() + " --> " + entry.getValue());
        }

    }

    private static String CheckForEqual(int resultByMultiple) {
        String result = null;
        switch (resultByMultiple) {
            case 150:
                result = "Mimosa";
                break;
            case 250:
                result = "Daiquiri";
                break;
            case 300:
                result = "Sunshine";
                break;
            case 400:
                result = "Mojito";
                break;
        }
        return result;
    }

    private static ArrayDeque<Integer> ParseToQueue(int[] level) {
        ArrayDeque<Integer> freshLevel = new ArrayDeque<>();
        for (int i = level.length - 1; i >= 0; i--) {
            freshLevel.offer(level[i]);
        }
        return freshLevel;
    }

    private static ArrayDeque<Integer> ParseToStack(int[] ing) {
        ArrayDeque<Integer> ingredient = new ArrayDeque<>();
        for (int i = ing.length - 1; i >= 0; i--) {
            ingredient.push(ing[i]);
        }
        return ingredient;
    }
}
